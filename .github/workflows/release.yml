name: Release

on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"
    - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+"

env:
  CONTAINER_REGISTRY: us-docker.pkg.dev/spinnaker-community/docker

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Ensure code formatting and style is consistent
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.32

  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow
      - name: Assemble release info
        id: release_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          . .github/workflows/release_info.sh ${{ github.event.repository.full_name }}
          echo ::set-output name=CHANGELOG::$(echo -e "${CHANGELOG}")
          echo ::set-output name=SKIP_RELEASE::${SKIP_RELEASE}
          echo ::set-output name=IS_CANDIDATE::${IS_CANDIDATE}
          echo ::set-output name=RELEASE_VERSION::${RELEASE_VERSION}
      - name: Extract repository name
        id: extract_repo_name
        run: echo ::set-output name=REPO::${GITHUB_REPOSITORY##*/}
      - name: Get date
        id: get_date
        run: echo ::set-output name=DATETIME::$(date --utc +'%Y%m%d%H%M')

      - uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Fetch dependencies
        run: go get -d -v
      - name: Test
        run: go test -v ./...
      - name: Build binaries
        env:
          LDFLAGS: "-X github.com/spinnaker/spin/version.Version=${{ steps.release_info.outputs.RELEASE_VERSION }}"
        run: |
          GOARCH=amd64 GOOS=darwin go build -ldflags "${LDFLAGS}" -o dist/${{ steps.release_info.outputs.RELEASE_VERSION }}/darwin/amd64/spin .
          GOARCH=amd64 GOOS=linux go build -ldflags "${LDFLAGS}" -o dist/${{ steps.release_info.outputs.RELEASE_VERSION }}/linux/amd64/spin .
          GOARCH=amd64 GOOS=windows go build -ldflags "${LDFLAGS}" -o dist/${{ steps.release_info.outputs.RELEASE_VERSION }}/windows/amd64/spin.exe .
          dist/${{ steps.release_info.outputs.RELEASE_VERSION }}/linux/amd64/spin --version
      - name: Login to Google Cloud
        # Only run this on repositories in the 'spinnaker' org, not on forks.
        if: startsWith(github.repository, 'spinnaker/')
        uses: 'google-github-actions/auth@v0'
        # use service account flow defined at: https://github.com/google-github-actions/upload-cloud-storage#authenticating-via-service-account-key-json
        with:
          credentials_json: '${{ secrets.GAR_JSON_KEY }}'
      - name: Upload spin CLI binaries to GCS
        # Only run this on repositories in the 'spinnaker' org, not on forks.
        if: startsWith(github.repository, 'spinnaker/')
        uses: 'google-github-actions/upload-cloud-storage@v0'
        with:
          path: 'dist/'
          destination: 'spinnaker-artifacts/spin'
          parent: false
      - name: Determine latest spin CLI version and write to '(MAJOR.MINOR.x-)latest' files
        run: |
          gcs_latest="$(curl -s https://storage.googleapis.com/spinnaker-artifacts/spin/latest)"
          release=${{ steps.release_info.outputs.RELEASE_VERSION }}
          # SemVer sort 1.22.0 as later than 1.21.1
          latest="$(printf "%s\n%s" "${gcs_latest}" "${release}" | sort -V | tail -n1)"

          cat <<EOF
          gcs_latest: $gcs_latest
          release: $release
          latest: $latest
          EOF

          mkdir -p dist/latests
          echo "$latest" > dist/latests/latest

          # Bump latest version in MAJOR.MINOR
          major_minor="$(echo "$release" | cut -d '.' -f1-2)"
          echo "$release" > dist/latests/"${major_minor}.x-latest"
      - name: Upload latest version reference files
        # Only run this on repositories in the 'spinnaker' org, not on forks.
        if: startsWith(github.repository, 'spinnaker/')
        # See: https://spinnaker.io/docs/setup/other_config/spin/
        uses: 'google-github-actions/upload-cloud-storage@v0'
        with:
          path: 'dist/latests'
          destination: 'spinnaker-artifacts/spin'
          parent: false

      - name: Login to GAR
        # Only run this on repositories in the 'spinnaker' org, not on forks.
        if: startsWith(github.repository, 'spinnaker/')
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: us-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GAR_JSON_KEY }}
      - name: Build and publish container image
        # Only run this on repositories in the 'spinnaker' org, not on forks.
        if: startsWith(github.repository, 'spinnaker/')
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.slim
          push: true
          build-args: |
            "VERSION=${{ steps.release_info.outputs.RELEASE_VERSION }}"
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.extract_repo_name.outputs.REPO }}:${{ steps.release_info.outputs.RELEASE_VERSION }}"
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.extract_repo_name.outputs.REPO }}:${{ steps.release_info.outputs.RELEASE_VERSION }}-${{ github.sha }}-${{ steps.get_date.outputs.DATETIME }}"

      - name: Create release
        if: steps.release_info.outputs.SKIP_RELEASE == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.event.repository.name }} ${{ github.ref }}
          body: |
            ${{ steps.release_info.outputs.CHANGELOG }}
          draft: false
          prerelease: ${{ steps.release_info.outputs.IS_CANDIDATE }}
