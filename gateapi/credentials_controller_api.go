/*
 * Spinnaker API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"io/ioutil"
	"net/url"
	"net/http"
	"strings"
	"golang.org/x/net/context"
	"encoding/json"
	"fmt"
)

// Linger please
var (
	_ context.Context
)

type CredentialsControllerApiService service


/* CredentialsControllerApiService Retrieve an account&#39;s details
 * @param ctx context.Context for authentication, logging, tracing, etc.
 @param account account
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "xRateLimitApp" (string) X-RateLimit-App
     @param "accountNonExpired" (bool) 
     @param "accountNonLocked" (bool) 
     @param "allowedAccounts" ([]string) 
     @param "authorities0Authority" (string) 
     @param "credentialsNonExpired" (bool) 
     @param "email" (string) 
     @param "enabled" (bool) 
     @param "firstName" (string) 
     @param "lastName" (string) 
     @param "password" (string) 
     @param "roles" ([]string) 
     @param "username" (string) 
 @return AccountDetails*/
func (a *CredentialsControllerApiService) GetAccountUsingGET(ctx context.Context, account string, localVarOptionals map[string]interface{}) (AccountDetails,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  AccountDetails
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/credentials/{account}"
	localVarPath = strings.Replace(localVarPath, "{"+"account"+"}", fmt.Sprintf("%v", account), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["xRateLimitApp"], "string", "xRateLimitApp"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["accountNonExpired"], "bool", "accountNonExpired"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["accountNonLocked"], "bool", "accountNonLocked"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["authorities0Authority"], "string", "authorities0Authority"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["credentialsNonExpired"], "bool", "credentialsNonExpired"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["email"], "string", "email"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["enabled"], "bool", "enabled"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["firstName"], "string", "firstName"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["lastName"], "string", "lastName"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["password"], "string", "password"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["username"], "string", "username"); err != nil {
		return successPayload, nil, err
	}

	if localVarTempParam, localVarOk := localVarOptionals["accountNonExpired"].(bool); localVarOk {
		localVarQueryParams.Add("accountNonExpired", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["accountNonLocked"].(bool); localVarOk {
		localVarQueryParams.Add("accountNonLocked", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["allowedAccounts"].([]string); localVarOk {
		localVarQueryParams.Add("allowedAccounts", parameterToString(localVarTempParam, "multi"))
	}
	if localVarTempParam, localVarOk := localVarOptionals["authorities0Authority"].(string); localVarOk {
		localVarQueryParams.Add("authorities[0].authority", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["credentialsNonExpired"].(bool); localVarOk {
		localVarQueryParams.Add("credentialsNonExpired", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["email"].(string); localVarOk {
		localVarQueryParams.Add("email", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["enabled"].(bool); localVarOk {
		localVarQueryParams.Add("enabled", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["firstName"].(string); localVarOk {
		localVarQueryParams.Add("firstName", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["lastName"].(string); localVarOk {
		localVarQueryParams.Add("lastName", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["password"].(string); localVarOk {
		localVarQueryParams.Add("password", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["roles"].([]string); localVarOk {
		localVarQueryParams.Add("roles", parameterToString(localVarTempParam, "multi"))
	}
	if localVarTempParam, localVarOk := localVarOptionals["username"].(string); localVarOk {
		localVarQueryParams.Add("username", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"*/*",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarTempParam, localVarOk := localVarOptionals["xRateLimitApp"].(string); localVarOk {
		localVarHeaderParams["X-RateLimit-App"] = parameterToString(localVarTempParam, "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return successPayload, localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CredentialsControllerApiService Retrieve a list of accounts
 * @param ctx context.Context for authentication, logging, tracing, etc.
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "accountNonExpired" (bool) 
     @param "accountNonLocked" (bool) 
     @param "allowedAccounts" ([]string) 
     @param "authorities0Authority" (string) 
     @param "credentialsNonExpired" (bool) 
     @param "email" (string) 
     @param "enabled" (bool) 
     @param "expand" (bool) expand
     @param "firstName" (string) 
     @param "lastName" (string) 
     @param "password" (string) 
     @param "roles" ([]string) 
     @param "username" (string) 
 @return []Account*/
func (a *CredentialsControllerApiService) GetAccountsUsingGET(ctx context.Context, localVarOptionals map[string]interface{}) ([]Account,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  []Account
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/credentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["accountNonExpired"], "bool", "accountNonExpired"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["accountNonLocked"], "bool", "accountNonLocked"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["authorities0Authority"], "string", "authorities0Authority"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["credentialsNonExpired"], "bool", "credentialsNonExpired"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["email"], "string", "email"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["enabled"], "bool", "enabled"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["expand"], "bool", "expand"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["firstName"], "string", "firstName"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["lastName"], "string", "lastName"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["password"], "string", "password"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["username"], "string", "username"); err != nil {
		return successPayload, nil, err
	}

	if localVarTempParam, localVarOk := localVarOptionals["accountNonExpired"].(bool); localVarOk {
		localVarQueryParams.Add("accountNonExpired", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["accountNonLocked"].(bool); localVarOk {
		localVarQueryParams.Add("accountNonLocked", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["allowedAccounts"].([]string); localVarOk {
		localVarQueryParams.Add("allowedAccounts", parameterToString(localVarTempParam, "multi"))
	}
	if localVarTempParam, localVarOk := localVarOptionals["authorities0Authority"].(string); localVarOk {
		localVarQueryParams.Add("authorities[0].authority", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["credentialsNonExpired"].(bool); localVarOk {
		localVarQueryParams.Add("credentialsNonExpired", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["email"].(string); localVarOk {
		localVarQueryParams.Add("email", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["enabled"].(bool); localVarOk {
		localVarQueryParams.Add("enabled", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["expand"].(bool); localVarOk {
		localVarQueryParams.Add("expand", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["firstName"].(string); localVarOk {
		localVarQueryParams.Add("firstName", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["lastName"].(string); localVarOk {
		localVarQueryParams.Add("lastName", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["password"].(string); localVarOk {
		localVarQueryParams.Add("password", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["roles"].([]string); localVarOk {
		localVarQueryParams.Add("roles", parameterToString(localVarTempParam, "multi"))
	}
	if localVarTempParam, localVarOk := localVarOptionals["username"].(string); localVarOk {
		localVarQueryParams.Add("username", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"*/*",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return successPayload, localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

