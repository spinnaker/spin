
/*
 * Spinnaker API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type CredentialsControllerApiService service

/* 
CredentialsControllerApiService Creates a new account definition.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *CredentialsControllerApiCreateAccountUsingPOSTOpts - Optional Parameters:
     * @param "AccountDefinition" (optional.Interface of AccountDefinition) -  Account definition body including a discriminator field named \&quot;type\&quot; with the account type.

@return AccountDefinition
*/

type CredentialsControllerApiCreateAccountUsingPOSTOpts struct { 
	AccountDefinition optional.Interface
}

func (a *CredentialsControllerApiService) CreateAccountUsingPOST(ctx context.Context, localVarOptionals *CredentialsControllerApiCreateAccountUsingPOSTOpts) (AccountDefinition, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue AccountDefinition
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/credentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.AccountDefinition.IsSet() {
		
		localVarOptionalAccountDefinition, localVarOptionalAccountDefinitionok := localVarOptionals.AccountDefinition.Value().(AccountDefinition)
		if !localVarOptionalAccountDefinitionok {
				return localVarReturnValue, nil, reportError("accountDefinition should be AccountDefinition")
		}
		localVarPostBody = &localVarOptionalAccountDefinition
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v AccountDefinition
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
CredentialsControllerApiService Deletes an account definition by name.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountName Name of account definition to delete.


*/
func (a *CredentialsControllerApiService) DeleteAccountUsingDELETE(ctx context.Context, accountName string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/credentials/{accountName}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountName"+"}", fmt.Sprintf("%v", accountName), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/* 
CredentialsControllerApiService Retrieve an account&#39;s details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param account account
 * @param optional nil or *CredentialsControllerApiGetAccountUsingGETOpts - Optional Parameters:
     * @param "XRateLimitApp" (optional.String) -  X-RateLimit-App
     * @param "AccountNonExpired" (optional.Bool) - 
     * @param "AccountNonLocked" (optional.Bool) - 
     * @param "AllowedAccounts" (optional.Interface of []string) - 
     * @param "Authorities0Authority" (optional.String) - 
     * @param "CredentialsNonExpired" (optional.Bool) - 
     * @param "Email" (optional.String) - 
     * @param "Enabled" (optional.Bool) - 
     * @param "FirstName" (optional.String) - 
     * @param "LastName" (optional.String) - 
     * @param "Password" (optional.String) - 
     * @param "Roles" (optional.Interface of []string) - 
     * @param "Username" (optional.String) - 

@return AccountDetails
*/

type CredentialsControllerApiGetAccountUsingGETOpts struct { 
	XRateLimitApp optional.String
	AccountNonExpired optional.Bool
	AccountNonLocked optional.Bool
	AllowedAccounts optional.Interface
	Authorities0Authority optional.String
	CredentialsNonExpired optional.Bool
	Email optional.String
	Enabled optional.Bool
	FirstName optional.String
	LastName optional.String
	Password optional.String
	Roles optional.Interface
	Username optional.String
}

func (a *CredentialsControllerApiService) GetAccountUsingGET(ctx context.Context, account string, localVarOptionals *CredentialsControllerApiGetAccountUsingGETOpts) (AccountDetails, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue AccountDetails
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/credentials/{account}"
	localVarPath = strings.Replace(localVarPath, "{"+"account"+"}", fmt.Sprintf("%v", account), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.AccountNonExpired.IsSet() {
		localVarQueryParams.Add("accountNonExpired", parameterToString(localVarOptionals.AccountNonExpired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNonLocked.IsSet() {
		localVarQueryParams.Add("accountNonLocked", parameterToString(localVarOptionals.AccountNonLocked.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AllowedAccounts.IsSet() {
		localVarQueryParams.Add("allowedAccounts", parameterToString(localVarOptionals.AllowedAccounts.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.Authorities0Authority.IsSet() {
		localVarQueryParams.Add("authorities[0].authority", parameterToString(localVarOptionals.Authorities0Authority.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CredentialsNonExpired.IsSet() {
		localVarQueryParams.Add("credentialsNonExpired", parameterToString(localVarOptionals.CredentialsNonExpired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarQueryParams.Add("email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Enabled.IsSet() {
		localVarQueryParams.Add("enabled", parameterToString(localVarOptionals.Enabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstName.IsSet() {
		localVarQueryParams.Add("firstName", parameterToString(localVarOptionals.FirstName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastName.IsSet() {
		localVarQueryParams.Add("lastName", parameterToString(localVarOptionals.LastName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Password.IsSet() {
		localVarQueryParams.Add("password", parameterToString(localVarOptionals.Password.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Roles.IsSet() {
		localVarQueryParams.Add("roles", parameterToString(localVarOptionals.Roles.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.Username.IsSet() {
		localVarQueryParams.Add("username", parameterToString(localVarOptionals.Username.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XRateLimitApp.IsSet() {
		localVarHeaderParams["X-RateLimit-App"] = parameterToString(localVarOptionals.XRateLimitApp.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v AccountDetails
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
CredentialsControllerApiService Looks up account definitions by type.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountType Value of the \&quot;@type\&quot; key for accounts to search for.
 * @param optional nil or *CredentialsControllerApiGetAccountsByTypeUsingGETOpts - Optional Parameters:
     * @param "Limit" (optional.String) -  Maximum number of entries to return in results. Used for pagination.
     * @param "StartingAccountName" (optional.String) -  Account name to start account definition listing from. Used for pagination.

@return []AccountDefinition
*/

type CredentialsControllerApiGetAccountsByTypeUsingGETOpts struct { 
	Limit optional.String
	StartingAccountName optional.String
}

func (a *CredentialsControllerApiService) GetAccountsByTypeUsingGET(ctx context.Context, accountType string, localVarOptionals *CredentialsControllerApiGetAccountsByTypeUsingGETOpts) ([]AccountDefinition, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []AccountDefinition
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/credentials/type/{accountType}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountType"+"}", fmt.Sprintf("%v", accountType), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartingAccountName.IsSet() {
		localVarQueryParams.Add("startingAccountName", parameterToString(localVarOptionals.StartingAccountName.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v []AccountDefinition
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
CredentialsControllerApiService Retrieve a list of accounts
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *CredentialsControllerApiGetAccountsUsingGETOpts - Optional Parameters:
     * @param "AccountNonExpired" (optional.Bool) - 
     * @param "AccountNonLocked" (optional.Bool) - 
     * @param "AllowedAccounts" (optional.Interface of []string) - 
     * @param "Authorities0Authority" (optional.String) - 
     * @param "CredentialsNonExpired" (optional.Bool) - 
     * @param "Email" (optional.String) - 
     * @param "Enabled" (optional.Bool) - 
     * @param "Expand" (optional.Bool) -  expand
     * @param "FirstName" (optional.String) - 
     * @param "LastName" (optional.String) - 
     * @param "Password" (optional.String) - 
     * @param "Roles" (optional.Interface of []string) - 
     * @param "Username" (optional.String) - 

@return []Account
*/

type CredentialsControllerApiGetAccountsUsingGETOpts struct { 
	AccountNonExpired optional.Bool
	AccountNonLocked optional.Bool
	AllowedAccounts optional.Interface
	Authorities0Authority optional.String
	CredentialsNonExpired optional.Bool
	Email optional.String
	Enabled optional.Bool
	Expand optional.Bool
	FirstName optional.String
	LastName optional.String
	Password optional.String
	Roles optional.Interface
	Username optional.String
}

func (a *CredentialsControllerApiService) GetAccountsUsingGET(ctx context.Context, localVarOptionals *CredentialsControllerApiGetAccountsUsingGETOpts) ([]Account, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []Account
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/credentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.AccountNonExpired.IsSet() {
		localVarQueryParams.Add("accountNonExpired", parameterToString(localVarOptionals.AccountNonExpired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNonLocked.IsSet() {
		localVarQueryParams.Add("accountNonLocked", parameterToString(localVarOptionals.AccountNonLocked.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AllowedAccounts.IsSet() {
		localVarQueryParams.Add("allowedAccounts", parameterToString(localVarOptionals.AllowedAccounts.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.Authorities0Authority.IsSet() {
		localVarQueryParams.Add("authorities[0].authority", parameterToString(localVarOptionals.Authorities0Authority.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CredentialsNonExpired.IsSet() {
		localVarQueryParams.Add("credentialsNonExpired", parameterToString(localVarOptionals.CredentialsNonExpired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarQueryParams.Add("email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Enabled.IsSet() {
		localVarQueryParams.Add("enabled", parameterToString(localVarOptionals.Enabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("expand", parameterToString(localVarOptionals.Expand.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstName.IsSet() {
		localVarQueryParams.Add("firstName", parameterToString(localVarOptionals.FirstName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastName.IsSet() {
		localVarQueryParams.Add("lastName", parameterToString(localVarOptionals.LastName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Password.IsSet() {
		localVarQueryParams.Add("password", parameterToString(localVarOptionals.Password.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Roles.IsSet() {
		localVarQueryParams.Add("roles", parameterToString(localVarOptionals.Roles.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.Username.IsSet() {
		localVarQueryParams.Add("username", parameterToString(localVarOptionals.Username.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v []Account
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
CredentialsControllerApiService Updates an existing account definition.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *CredentialsControllerApiUpdateAccountUsingPUTOpts - Optional Parameters:
     * @param "AccountDefinition" (optional.Interface of AccountDefinition) -  Account definition body including a discriminator field named \&quot;type\&quot; with the account type.

@return AccountDefinition
*/

type CredentialsControllerApiUpdateAccountUsingPUTOpts struct { 
	AccountDefinition optional.Interface
}

func (a *CredentialsControllerApiService) UpdateAccountUsingPUT(ctx context.Context, localVarOptionals *CredentialsControllerApiUpdateAccountUsingPUTOpts) (AccountDefinition, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue AccountDefinition
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/credentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.AccountDefinition.IsSet() {
		
		localVarOptionalAccountDefinition, localVarOptionalAccountDefinitionok := localVarOptionals.AccountDefinition.Value().(AccountDefinition)
		if !localVarOptionalAccountDefinitionok {
				return localVarReturnValue, nil, reportError("accountDefinition should be AccountDefinition")
		}
		localVarPostBody = &localVarOptionalAccountDefinition
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v AccountDefinition
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
